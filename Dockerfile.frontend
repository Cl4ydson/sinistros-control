# Multi-stage Dockerfile for React Frontend
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first
COPY frontend/package*.json ./

# Install dependencies with verbose logging
RUN npm ci --verbose

# Copy all frontend source code
COPY frontend/ .

# Set environment variables for build
ENV NODE_ENV=production
ENV VITE_API_BASE_URL=/api
ENV VITE_DEMO_MODE=false

# Build the application with verbose output
RUN npm run build --verbose

# Verify build was successful
RUN echo "=== CHECKING BUILD ===" && \
    ls -la && \
    echo "=== DIST FOLDER ===" && \
    ls -la dist/ && \
    echo "=== DIST FILES ===" && \
    find dist/ -type f && \
    echo "=== END BUILD CHECK ==="

# Ensure index.html exists in dist
RUN test -f dist/index.html || (echo "ERROR: index.html not found in dist!" && exit 1)

# Production stage
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Remove default nginx content
RUN rm -rf /usr/share/nginx/html/*

# Copy built React app from builder stage
COPY --from=builder /app/dist/ /usr/share/nginx/html/

# Verify files were copied correctly
RUN echo "=== NGINX HTML FOLDER ===" && \
    ls -la /usr/share/nginx/html/ && \
    echo "=== CHECKING INDEX.HTML ===" && \
    test -f /usr/share/nginx/html/index.html && echo "index.html found!" || echo "ERROR: index.html missing!"

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]