@echo off
echo ===============================================
echo  üöÄ SISTEMA SINISTROS ULTRATHINK - CORRIGIDO
echo      Vers√£o com corre√ß√µes v2.1
echo ===============================================
echo.

REM Verificar se Python est√° instalado
python --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Python n√£o encontrado! Instale o Python 3.8+ primeiro.
    echo üí° Download: https://www.python.org/downloads/
    pause
    exit /b 1
)

REM Verificar se Node.js est√° instalado
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Node.js n√£o encontrado! Instale o Node.js primeiro.
    echo üí° Download: https://nodejs.org/
    pause
    exit /b 1
)

echo ‚úÖ Python e Node.js detectados
echo.

REM =================== ENCERRAR PROCESSOS EXISTENTES ===================
echo üîÑ Verificando e encerrando processos existentes...

REM Fun√ß√£o para encerrar processo por porta
call :KillProcessByPort 8001 "Backend API"
call :KillProcessByPort 8003 "Backend API (alternativo)"
call :KillProcessByPort 5173 "Frontend React"

REM Encerrar processos espec√≠ficos por nome de janela
echo üîÑ Encerrando processos por nome de janela...
for /f "tokens=2" %%a in ('tasklist /FI "WINDOWTITLE eq BACKEND*" /FO CSV ^| findstr /V "INFO:"') do (
    if not "%%a"=="PID" (
        echo üîÑ Encerrando processo BACKEND - PID %%a
        taskkill /F /PID %%a >nul 2>&1
    )
)

for /f "tokens=2" %%a in ('tasklist /FI "WINDOWTITLE eq FRONTEND*" /FO CSV ^| findstr /V "INFO:"') do (
    if not "%%a"=="PID" (
        echo üîÑ Encerrando processo FRONTEND - PID %%a
        taskkill /F /PID %%a >nul 2>&1
    )
)

REM Encerrar processos uvicorn e npm dev espec√≠ficos
echo üîÑ Encerrando processos uvicorn e npm...
wmic process where "CommandLine like '%%uvicorn%%app.main:app%%'" delete >nul 2>&1
wmic process where "CommandLine like '%%npm run dev%%'" delete >nul 2>&1

REM Aguardar um momento para os processos serem encerrados
timeout /t 3 /nobreak >nul
echo ‚úÖ Processos existentes encerrados

echo.

REM =================== CONFIGURAR BACKEND ===================
echo üì¶ Configurando Backend...
cd backend

REM Verificar/criar ambiente virtual
if not exist "venv" (
    echo üîß Criando ambiente virtual...
    python -m venv venv
    if %errorlevel% neq 0 (
        echo ‚ùå Erro ao criar ambiente virtual!
        pause
        exit /b 1
    )
)

echo üîß Ativando ambiente virtual...
call venv\Scripts\activate.bat

REM Verificar e instalar depend√™ncias
echo üì• Verificando depend√™ncias do backend...
python -c "import fastapi, uvicorn, sqlalchemy" >nul 2>&1
if %errorlevel% neq 0 (
    echo üì• Instalando depend√™ncias...
    pip install -r requirements.txt
    if %errorlevel% neq 0 (
        echo ‚ùå Erro ao instalar depend√™ncias!
        pause
        exit /b 1
    )
)

REM Testar importa√ß√£o da aplica√ß√£o
echo üß™ Verificando aplica√ß√£o FastAPI...
python -c "from app.main import app; print('‚úÖ App verificada')"
if %errorlevel% neq 0 (
    echo ‚ùå Erro na aplica√ß√£o FastAPI! Verifique os logs.
    pause
    exit /b 1
)

echo.
echo üöÄ Iniciando Backend API na porta 8001...
start "BACKEND - API Sinistros CORRIGIDA" cmd /c "call venv\Scripts\activate.bat && uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload && pause"

REM Aguardar backend inicializar
echo ‚è≥ Aguardando backend inicializar...
timeout /t 8 /nobreak >nul

REM =================== CONFIGURAR FRONTEND ===================
cd ..\frontend
echo.
echo üì¶ Configurando Frontend...

if not exist "node_modules" (
    echo üì• Instalando depend√™ncias do frontend...
    npm install
    if %errorlevel% neq 0 (
        echo ‚ùå Erro ao instalar depend√™ncias do frontend!
        pause
        exit /b 1
    )
) else (
    echo ‚úÖ Depend√™ncias do frontend j√° instaladas
)

echo.
echo üé® Iniciando Frontend React na porta 5173...
start "FRONTEND - React App" cmd /c "npm run dev && pause"

REM Aguardar frontend inicializar
echo ‚è≥ Aguardando frontend inicializar...
timeout /t 10 /nobreak >nul

echo.
echo ===============================================
echo   ‚úÖ SISTEMA ULTRATHINK CORRIGIDO E ATIVO!
echo ===============================================
echo.
echo üåê Acesse o sistema:
echo    Frontend: http://localhost:5173
echo    API Docs: http://localhost:8001/docs
echo    API Test: http://localhost:8001/
echo.
echo üîß Corre√ß√µes aplicadas:
echo    ‚úì Corrigido erro de importa√ß√£o User
echo    ‚úì Verifica√ß√£o de depend√™ncias melhorada
echo    ‚úì Tratamento de erros aprimorado
echo    ‚úì Logs mais detalhados
echo.
echo üìä Funcionalidades Dispon√≠veis:
echo    ‚úì Dashboard Ultra Profissional
echo    ‚úì Gest√£o de Sinistros com dados reais
echo    ‚úì Filtros avan√ßados
echo    ‚úì M√©tricas em tempo real
echo    ‚úì Interface moderna e responsiva
echo.
echo üîß Para parar o sistema:
echo    - Feche as janelas do terminal backend e frontend
echo    - Ou pressione Ctrl+C em cada janela
echo.

REM Aguardar e testar conex√µes
echo üîç Verificando se os servi√ßos est√£o online...
timeout /t 3 /nobreak >nul

REM Tentar testar backend
echo üß™ Testando backend...
powershell -command "try { $r = Invoke-WebRequest -Uri 'http://localhost:8001/' -UseBasicParsing -TimeoutSec 5; Write-Host '‚úÖ Backend API: ONLINE' } catch { Write-Host '‚ö†Ô∏è  Backend API: Verificando...' }"

REM Tentar testar frontend
echo üß™ Testando frontend...
powershell -command "try { $r = Invoke-WebRequest -Uri 'http://localhost:5173' -UseBasicParsing -TimeoutSec 5; Write-Host '‚úÖ Frontend React: ONLINE' } catch { Write-Host '‚ö†Ô∏è  Frontend React: Iniciando...' }"

echo.
echo üéØ Status: Sistema ULTRATHINK corrigido e pronto para uso!
echo.
echo üí° Dicas:
echo    - Se houver erro de conex√£o, aguarde mais alguns segundos
echo    - Use Ctrl+C para parar os servi√ßos quando terminar
echo    - Verifique os logs nas janelas do backend e frontend
echo.

REM Abrir navegador automaticamente ap√≥s um tempo
timeout /t 5 /nobreak >nul
start http://localhost:5173

echo ‚å®Ô∏è  Pressione qualquer tecla para continuar monitorando...
pause >nul

cd ..
goto :EOF

REM =================== FUN√á√ïES AUXILIARES ===================
:KillProcessByPort
set PORT=%1
set DESCRIPTION=%2
for /f "tokens=5" %%a in ('netstat -ano ^| findstr :%PORT% ^| findstr LISTENING') do (
    echo üîÑ Encerrando %DESCRIPTION% na porta %PORT% - PID %%a
    taskkill /F /PID %%a >nul 2>&1
    if %errorlevel% equ 0 (
        echo ‚úÖ Processo PID %%a encerrado com sucesso
    ) else (
        echo ‚ö†Ô∏è  N√£o foi poss√≠vel encerrar processo PID %%a
    )
)
goto :EOF 