version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - MSSQL_PID=${MSSQL_PID:-Express}
      - MSSQL_TCP_PORT=${MSSQL_TCP_PORT:-1433}
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./sql/init:/tmp/init-scripts:ro
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MSSQL_SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # SQL Server Initialization
  sqlserver-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: "no"
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
    volumes:
      - ./sql/init:/tmp/init-scripts:ro
    depends_on:
      sqlserver:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for SQL Server...';
        sleep 10;
        echo 'Running database initialization...';
        for sql_file in /tmp/init-scripts/*.sql; do
          if [ -f \"$sql_file\" ]; then
            echo \"Executing $sql_file...\";
            /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P $MSSQL_SA_PASSWORD -d master -i \"$sql_file\";
          fi
        done;
        echo 'Database initialization completed.';
      "

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DB_SERVER=${DB_SERVER}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_TRANSPORT_SERVER=${DB_TRANSPORT_SERVER}
      - DB_TRANSPORT_DATABASE=${DB_TRANSPORT_DATABASE}
      - DB_TRANSPORT_USERNAME=${DB_TRANSPORT_USERNAME}
      - DB_TRANSPORT_PASSWORD=${DB_TRANSPORT_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - TRUST_SERVER_CERTIFICATE=${TRUST_SERVER_CERTIFICATE}
      - ENCRYPT=${ENCRYPT}
    depends_on:
      sqlserver:
        condition: service_healthy
      sqlserver-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - VITE_DEMO_MODE=${VITE_DEMO_MODE}
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  sqlserver_data:
    driver: local